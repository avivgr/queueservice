// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QueueService.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "QueueService.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CreateQueueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateQueueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateQueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateQueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelQueueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelQueueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelQueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelQueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnqueueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnqueueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnqueueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnqueueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DequeueRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DequeueRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DequeueResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DequeueResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Request_ReqType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Response_RespType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_QueueService_2eproto() {
  protobuf_AddDesc_QueueService_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "QueueService.proto");
  GOOGLE_CHECK(file != NULL);
  CreateQueueRequest_descriptor_ = file->message_type(0);
  static const int CreateQueueRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateQueueRequest, name_),
  };
  CreateQueueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateQueueRequest_descriptor_,
      CreateQueueRequest::default_instance_,
      CreateQueueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateQueueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateQueueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateQueueRequest));
  CreateQueueResponse_descriptor_ = file->message_type(1);
  static const int CreateQueueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateQueueResponse, queueid_),
  };
  CreateQueueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateQueueResponse_descriptor_,
      CreateQueueResponse::default_instance_,
      CreateQueueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateQueueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateQueueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateQueueResponse));
  GetQueueRequest_descriptor_ = file->message_type(2);
  static const int GetQueueRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueRequest, name_),
  };
  GetQueueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueueRequest_descriptor_,
      GetQueueRequest::default_instance_,
      GetQueueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueueRequest));
  GetQueueResponse_descriptor_ = file->message_type(3);
  static const int GetQueueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, queueid_),
  };
  GetQueueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQueueResponse_descriptor_,
      GetQueueResponse::default_instance_,
      GetQueueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQueueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQueueResponse));
  DelQueueRequest_descriptor_ = file->message_type(4);
  static const int DelQueueRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelQueueRequest, queueid_),
  };
  DelQueueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelQueueRequest_descriptor_,
      DelQueueRequest::default_instance_,
      DelQueueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelQueueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelQueueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelQueueRequest));
  DelQueueResponse_descriptor_ = file->message_type(5);
  static const int DelQueueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelQueueResponse, status_),
  };
  DelQueueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelQueueResponse_descriptor_,
      DelQueueResponse::default_instance_,
      DelQueueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelQueueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelQueueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelQueueResponse));
  EnqueueRequest_descriptor_ = file->message_type(6);
  static const int EnqueueRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueRequest, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueRequest, data_),
  };
  EnqueueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnqueueRequest_descriptor_,
      EnqueueRequest::default_instance_,
      EnqueueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnqueueRequest));
  EnqueueResponse_descriptor_ = file->message_type(7);
  static const int EnqueueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueResponse, status_),
  };
  EnqueueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnqueueResponse_descriptor_,
      EnqueueResponse::default_instance_,
      EnqueueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnqueueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnqueueResponse));
  ReadRequest_descriptor_ = file->message_type(8);
  static const int ReadRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, timeout_),
  };
  ReadRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadRequest_descriptor_,
      ReadRequest::default_instance_,
      ReadRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadRequest));
  ReadResponse_descriptor_ = file->message_type(9);
  static const int ReadResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, queueentitiyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, data_),
  };
  ReadResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadResponse_descriptor_,
      ReadResponse::default_instance_,
      ReadResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadResponse));
  DequeueRequest_descriptor_ = file->message_type(10);
  static const int DequeueRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueRequest, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueRequest, queueentitiyid_),
  };
  DequeueRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DequeueRequest_descriptor_,
      DequeueRequest::default_instance_,
      DequeueRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DequeueRequest));
  DequeueResponse_descriptor_ = file->message_type(11);
  static const int DequeueResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueResponse, status_),
  };
  DequeueResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DequeueResponse_descriptor_,
      DequeueResponse::default_instance_,
      DequeueResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DequeueResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DequeueResponse));
  Request_descriptor_ = file->message_type(12);
  static const int Request_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, createqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, getqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, delqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, enqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, dequeue_),
  };
  Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Request));
  Request_ReqType_descriptor_ = Request_descriptor_->enum_type(0);
  Response_descriptor_ = file->message_type(13);
  static const int Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, createqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, getqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, delqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, enqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, dequeue_),
  };
  Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Response));
  Response_RespType_descriptor_ = Response_descriptor_->enum_type(0);
  Status_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_QueueService_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateQueueRequest_descriptor_, &CreateQueueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateQueueResponse_descriptor_, &CreateQueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueueRequest_descriptor_, &GetQueueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQueueResponse_descriptor_, &GetQueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelQueueRequest_descriptor_, &DelQueueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelQueueResponse_descriptor_, &DelQueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnqueueRequest_descriptor_, &EnqueueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnqueueResponse_descriptor_, &EnqueueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadRequest_descriptor_, &ReadRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadResponse_descriptor_, &ReadResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DequeueRequest_descriptor_, &DequeueRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DequeueResponse_descriptor_, &DequeueResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Response_descriptor_, &Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_QueueService_2eproto() {
  delete CreateQueueRequest::default_instance_;
  delete CreateQueueRequest_reflection_;
  delete CreateQueueResponse::default_instance_;
  delete CreateQueueResponse_reflection_;
  delete GetQueueRequest::default_instance_;
  delete GetQueueRequest_reflection_;
  delete GetQueueResponse::default_instance_;
  delete GetQueueResponse_reflection_;
  delete DelQueueRequest::default_instance_;
  delete DelQueueRequest_reflection_;
  delete DelQueueResponse::default_instance_;
  delete DelQueueResponse_reflection_;
  delete EnqueueRequest::default_instance_;
  delete EnqueueRequest_reflection_;
  delete EnqueueResponse::default_instance_;
  delete EnqueueResponse_reflection_;
  delete ReadRequest::default_instance_;
  delete ReadRequest_reflection_;
  delete ReadResponse::default_instance_;
  delete ReadResponse_reflection_;
  delete DequeueRequest::default_instance_;
  delete DequeueRequest_reflection_;
  delete DequeueResponse::default_instance_;
  delete DequeueResponse_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_reflection_;
}

void protobuf_AddDesc_QueueService_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022QueueService.proto\"\"\n\022CreateQueueReque"
    "st\022\014\n\004name\030\001 \002(\t\"&\n\023CreateQueueResponse\022"
    "\017\n\007queueid\030\001 \002(\t\"\037\n\017GetQueueRequest\022\014\n\004n"
    "ame\030\001 \002(\t\"#\n\020GetQueueResponse\022\017\n\007queueid"
    "\030\001 \002(\t\"\"\n\017DelQueueRequest\022\017\n\007queueid\030\001 \002"
    "(\t\"+\n\020DelQueueResponse\022\027\n\006status\030\001 \002(\0162\007"
    ".Status\"/\n\016EnqueueRequest\022\017\n\007queueid\030\001 \002"
    "(\t\022\014\n\004data\030\002 \002(\014\"*\n\017EnqueueResponse\022\027\n\006s"
    "tatus\030\001 \002(\0162\007.Status\"/\n\013ReadRequest\022\017\n\007q"
    "ueueid\030\001 \002(\t\022\017\n\007timeout\030\002 \002(\005\"E\n\014ReadRes"
    "ponse\022\017\n\007queueid\030\001 \002(\t\022\026\n\016queueentitiyid"
    "\030\002 \002(\t\022\014\n\004data\030\003 \002(\014\"9\n\016DequeueRequest\022\017"
    "\n\007queueid\030\001 \002(\t\022\026\n\016queueentitiyid\030\002 \002(\t\""
    "*\n\017DequeueResponse\022\027\n\006status\030\001 \002(\0162\007.Sta"
    "tus\"\332\002\n\007Request\022\036\n\004type\030\001 \002(\0162\020.Request."
    "ReqType\022(\n\013createQueue\030\002 \001(\0132\023.CreateQue"
    "ueRequest\022\"\n\010getQueue\030\003 \001(\0132\020.GetQueueRe"
    "quest\022\"\n\010delQueue\030\004 \001(\0132\020.DelQueueReques"
    "t\022 \n\007enqueue\030\005 \001(\0132\017.EnqueueRequest\022\032\n\004r"
    "ead\030\006 \001(\0132\014.ReadRequest\022 \n\007dequeue\030\007 \001(\013"
    "2\017.DequeueRequest\"]\n\007ReqType\022\020\n\014CREATE_Q"
    "UEUE\020\001\022\r\n\tGET_QUEUE\020\002\022\r\n\tDEL_QUEUE\020\003\022\013\n\007"
    "ENQUEUE\020\004\022\010\n\004READ\020\005\022\013\n\007DEQUEUE\020\006\"\344\002\n\010Res"
    "ponse\022 \n\004type\030\001 \002(\0162\022.Response.RespType\022"
    ")\n\013createQueue\030\002 \001(\0132\024.CreateQueueRespon"
    "se\022#\n\010getQueue\030\003 \001(\0132\021.GetQueueResponse\022"
    "#\n\010delQueue\030\004 \001(\0132\021.DelQueueResponse\022!\n\007"
    "enqueue\030\005 \001(\0132\020.EnqueueResponse\022\033\n\004read\030"
    "\006 \001(\0132\r.ReadResponse\022!\n\007dequeue\030\007 \001(\0132\020."
    "DequeueResponse\"^\n\010RespType\022\020\n\014CREATE_QU"
    "EUE\020\001\022\r\n\tGET_QUEUE\020\002\022\r\n\tDEL_QUEUE\020\003\022\013\n\007E"
    "NQUEUE\020\004\022\010\n\004READ\020\005\022\013\n\007DEQUEUE\020\006*+\n\006Statu"
    "s\022\013\n\007SUCCESS\020\000\022\n\n\006NO_MEM\020\001\022\010\n\004BUSY\020\002", 1316);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "QueueService.proto", &protobuf_RegisterTypes);
  CreateQueueRequest::default_instance_ = new CreateQueueRequest();
  CreateQueueResponse::default_instance_ = new CreateQueueResponse();
  GetQueueRequest::default_instance_ = new GetQueueRequest();
  GetQueueResponse::default_instance_ = new GetQueueResponse();
  DelQueueRequest::default_instance_ = new DelQueueRequest();
  DelQueueResponse::default_instance_ = new DelQueueResponse();
  EnqueueRequest::default_instance_ = new EnqueueRequest();
  EnqueueResponse::default_instance_ = new EnqueueResponse();
  ReadRequest::default_instance_ = new ReadRequest();
  ReadResponse::default_instance_ = new ReadResponse();
  DequeueRequest::default_instance_ = new DequeueRequest();
  DequeueResponse::default_instance_ = new DequeueResponse();
  Request::default_instance_ = new Request();
  Response::default_instance_ = new Response();
  CreateQueueRequest::default_instance_->InitAsDefaultInstance();
  CreateQueueResponse::default_instance_->InitAsDefaultInstance();
  GetQueueRequest::default_instance_->InitAsDefaultInstance();
  GetQueueResponse::default_instance_->InitAsDefaultInstance();
  DelQueueRequest::default_instance_->InitAsDefaultInstance();
  DelQueueResponse::default_instance_->InitAsDefaultInstance();
  EnqueueRequest::default_instance_->InitAsDefaultInstance();
  EnqueueResponse::default_instance_->InitAsDefaultInstance();
  ReadRequest::default_instance_->InitAsDefaultInstance();
  ReadResponse::default_instance_->InitAsDefaultInstance();
  DequeueRequest::default_instance_->InitAsDefaultInstance();
  DequeueResponse::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_QueueService_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_QueueService_2eproto {
  StaticDescriptorInitializer_QueueService_2eproto() {
    protobuf_AddDesc_QueueService_2eproto();
  }
} static_descriptor_initializer_QueueService_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CreateQueueRequest::kNameFieldNumber;
#endif  // !_MSC_VER

CreateQueueRequest::CreateQueueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateQueueRequest)
}

void CreateQueueRequest::InitAsDefaultInstance() {
}

CreateQueueRequest::CreateQueueRequest(const CreateQueueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateQueueRequest)
}

void CreateQueueRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateQueueRequest::~CreateQueueRequest() {
  // @@protoc_insertion_point(destructor:CreateQueueRequest)
  SharedDtor();
}

void CreateQueueRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CreateQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateQueueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateQueueRequest_descriptor_;
}

const CreateQueueRequest& CreateQueueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

CreateQueueRequest* CreateQueueRequest::default_instance_ = NULL;

CreateQueueRequest* CreateQueueRequest::New() const {
  return new CreateQueueRequest;
}

void CreateQueueRequest::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateQueueRequest)
  return false;
#undef DO_
}

void CreateQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateQueueRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateQueueRequest)
}

::google::protobuf::uint8* CreateQueueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateQueueRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateQueueRequest)
  return target;
}

int CreateQueueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateQueueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateQueueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateQueueRequest::MergeFrom(const CreateQueueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateQueueRequest::CopyFrom(const CreateQueueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateQueueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateQueueRequest::Swap(CreateQueueRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateQueueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateQueueRequest_descriptor_;
  metadata.reflection = CreateQueueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateQueueResponse::kQueueidFieldNumber;
#endif  // !_MSC_VER

CreateQueueResponse::CreateQueueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateQueueResponse)
}

void CreateQueueResponse::InitAsDefaultInstance() {
}

CreateQueueResponse::CreateQueueResponse(const CreateQueueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CreateQueueResponse)
}

void CreateQueueResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateQueueResponse::~CreateQueueResponse() {
  // @@protoc_insertion_point(destructor:CreateQueueResponse)
  SharedDtor();
}

void CreateQueueResponse::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (this != default_instance_) {
  }
}

void CreateQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateQueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateQueueResponse_descriptor_;
}

const CreateQueueResponse& CreateQueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

CreateQueueResponse* CreateQueueResponse::default_instance_ = NULL;

CreateQueueResponse* CreateQueueResponse::New() const {
  return new CreateQueueResponse;
}

void CreateQueueResponse::Clear() {
  if (has_queueid()) {
    if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      queueid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateQueueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateQueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateQueueResponse)
  return false;
#undef DO_
}

void CreateQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateQueueResponse)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateQueueResponse)
}

::google::protobuf::uint8* CreateQueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CreateQueueResponse)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateQueueResponse)
  return target;
}

int CreateQueueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateQueueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateQueueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateQueueResponse::MergeFrom(const CreateQueueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateQueueResponse::CopyFrom(const CreateQueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateQueueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateQueueResponse::Swap(CreateQueueResponse* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateQueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateQueueResponse_descriptor_;
  metadata.reflection = CreateQueueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueueRequest::kNameFieldNumber;
#endif  // !_MSC_VER

GetQueueRequest::GetQueueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetQueueRequest)
}

void GetQueueRequest::InitAsDefaultInstance() {
}

GetQueueRequest::GetQueueRequest(const GetQueueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetQueueRequest)
}

void GetQueueRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueueRequest::~GetQueueRequest() {
  // @@protoc_insertion_point(destructor:GetQueueRequest)
  SharedDtor();
}

void GetQueueRequest::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GetQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueueRequest_descriptor_;
}

const GetQueueRequest& GetQueueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

GetQueueRequest* GetQueueRequest::default_instance_ = NULL;

GetQueueRequest* GetQueueRequest::New() const {
  return new GetQueueRequest;
}

void GetQueueRequest::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetQueueRequest)
  return false;
#undef DO_
}

void GetQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetQueueRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetQueueRequest)
}

::google::protobuf::uint8* GetQueueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetQueueRequest)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetQueueRequest)
  return target;
}

int GetQueueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueueRequest::MergeFrom(const GetQueueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueueRequest::CopyFrom(const GetQueueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetQueueRequest::Swap(GetQueueRequest* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueueRequest_descriptor_;
  metadata.reflection = GetQueueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQueueResponse::kQueueidFieldNumber;
#endif  // !_MSC_VER

GetQueueResponse::GetQueueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetQueueResponse)
}

void GetQueueResponse::InitAsDefaultInstance() {
}

GetQueueResponse::GetQueueResponse(const GetQueueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:GetQueueResponse)
}

void GetQueueResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQueueResponse::~GetQueueResponse() {
  // @@protoc_insertion_point(destructor:GetQueueResponse)
  SharedDtor();
}

void GetQueueResponse::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (this != default_instance_) {
  }
}

void GetQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQueueResponse_descriptor_;
}

const GetQueueResponse& GetQueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

GetQueueResponse* GetQueueResponse::default_instance_ = NULL;

GetQueueResponse* GetQueueResponse::New() const {
  return new GetQueueResponse;
}

void GetQueueResponse::Clear() {
  if (has_queueid()) {
    if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      queueid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetQueueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetQueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetQueueResponse)
  return false;
#undef DO_
}

void GetQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetQueueResponse)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetQueueResponse)
}

::google::protobuf::uint8* GetQueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetQueueResponse)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetQueueResponse)
  return target;
}

int GetQueueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQueueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQueueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQueueResponse::MergeFrom(const GetQueueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQueueResponse::CopyFrom(const GetQueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQueueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetQueueResponse::Swap(GetQueueResponse* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQueueResponse_descriptor_;
  metadata.reflection = GetQueueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelQueueRequest::kQueueidFieldNumber;
#endif  // !_MSC_VER

DelQueueRequest::DelQueueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DelQueueRequest)
}

void DelQueueRequest::InitAsDefaultInstance() {
}

DelQueueRequest::DelQueueRequest(const DelQueueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DelQueueRequest)
}

void DelQueueRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelQueueRequest::~DelQueueRequest() {
  // @@protoc_insertion_point(destructor:DelQueueRequest)
  SharedDtor();
}

void DelQueueRequest::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (this != default_instance_) {
  }
}

void DelQueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelQueueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelQueueRequest_descriptor_;
}

const DelQueueRequest& DelQueueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

DelQueueRequest* DelQueueRequest::default_instance_ = NULL;

DelQueueRequest* DelQueueRequest::New() const {
  return new DelQueueRequest;
}

void DelQueueRequest::Clear() {
  if (has_queueid()) {
    if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      queueid_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelQueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DelQueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DelQueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DelQueueRequest)
  return false;
#undef DO_
}

void DelQueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DelQueueRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DelQueueRequest)
}

::google::protobuf::uint8* DelQueueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DelQueueRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DelQueueRequest)
  return target;
}

int DelQueueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelQueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelQueueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelQueueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelQueueRequest::MergeFrom(const DelQueueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelQueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelQueueRequest::CopyFrom(const DelQueueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelQueueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelQueueRequest::Swap(DelQueueRequest* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelQueueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelQueueRequest_descriptor_;
  metadata.reflection = DelQueueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelQueueResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

DelQueueResponse::DelQueueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DelQueueResponse)
}

void DelQueueResponse::InitAsDefaultInstance() {
}

DelQueueResponse::DelQueueResponse(const DelQueueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DelQueueResponse)
}

void DelQueueResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelQueueResponse::~DelQueueResponse() {
  // @@protoc_insertion_point(destructor:DelQueueResponse)
  SharedDtor();
}

void DelQueueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelQueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelQueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelQueueResponse_descriptor_;
}

const DelQueueResponse& DelQueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

DelQueueResponse* DelQueueResponse::default_instance_ = NULL;

DelQueueResponse* DelQueueResponse::New() const {
  return new DelQueueResponse;
}

void DelQueueResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelQueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DelQueueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Status_IsValid(value)) {
            set_status(static_cast< ::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DelQueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DelQueueResponse)
  return false;
#undef DO_
}

void DelQueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DelQueueResponse)
  // required .Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DelQueueResponse)
}

::google::protobuf::uint8* DelQueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DelQueueResponse)
  // required .Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DelQueueResponse)
  return target;
}

int DelQueueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelQueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelQueueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelQueueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelQueueResponse::MergeFrom(const DelQueueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelQueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelQueueResponse::CopyFrom(const DelQueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelQueueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DelQueueResponse::Swap(DelQueueResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelQueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelQueueResponse_descriptor_;
  metadata.reflection = DelQueueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnqueueRequest::kQueueidFieldNumber;
const int EnqueueRequest::kDataFieldNumber;
#endif  // !_MSC_VER

EnqueueRequest::EnqueueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnqueueRequest)
}

void EnqueueRequest::InitAsDefaultInstance() {
}

EnqueueRequest::EnqueueRequest(const EnqueueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EnqueueRequest)
}

void EnqueueRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnqueueRequest::~EnqueueRequest() {
  // @@protoc_insertion_point(destructor:EnqueueRequest)
  SharedDtor();
}

void EnqueueRequest::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void EnqueueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnqueueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnqueueRequest_descriptor_;
}

const EnqueueRequest& EnqueueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

EnqueueRequest* EnqueueRequest::default_instance_ = NULL;

EnqueueRequest* EnqueueRequest::New() const {
  return new EnqueueRequest;
}

void EnqueueRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_queueid()) {
      if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queueid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnqueueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnqueueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnqueueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnqueueRequest)
  return false;
#undef DO_
}

void EnqueueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnqueueRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnqueueRequest)
}

::google::protobuf::uint8* EnqueueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnqueueRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnqueueRequest)
  return target;
}

int EnqueueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnqueueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnqueueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnqueueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnqueueRequest::MergeFrom(const EnqueueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnqueueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueRequest::CopyFrom(const EnqueueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EnqueueRequest::Swap(EnqueueRequest* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnqueueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnqueueRequest_descriptor_;
  metadata.reflection = EnqueueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnqueueResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

EnqueueResponse::EnqueueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EnqueueResponse)
}

void EnqueueResponse::InitAsDefaultInstance() {
}

EnqueueResponse::EnqueueResponse(const EnqueueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:EnqueueResponse)
}

void EnqueueResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnqueueResponse::~EnqueueResponse() {
  // @@protoc_insertion_point(destructor:EnqueueResponse)
  SharedDtor();
}

void EnqueueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnqueueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnqueueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnqueueResponse_descriptor_;
}

const EnqueueResponse& EnqueueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

EnqueueResponse* EnqueueResponse::default_instance_ = NULL;

EnqueueResponse* EnqueueResponse::New() const {
  return new EnqueueResponse;
}

void EnqueueResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnqueueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EnqueueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Status_IsValid(value)) {
            set_status(static_cast< ::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EnqueueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EnqueueResponse)
  return false;
#undef DO_
}

void EnqueueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EnqueueResponse)
  // required .Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EnqueueResponse)
}

::google::protobuf::uint8* EnqueueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:EnqueueResponse)
  // required .Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EnqueueResponse)
  return target;
}

int EnqueueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnqueueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnqueueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnqueueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnqueueResponse::MergeFrom(const EnqueueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnqueueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnqueueResponse::CopyFrom(const EnqueueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EnqueueResponse::Swap(EnqueueResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnqueueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnqueueResponse_descriptor_;
  metadata.reflection = EnqueueResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadRequest::kQueueidFieldNumber;
const int ReadRequest::kTimeoutFieldNumber;
#endif  // !_MSC_VER

ReadRequest::ReadRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadRequest)
}

void ReadRequest::InitAsDefaultInstance() {
}

ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReadRequest)
}

void ReadRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (this != default_instance_) {
  }
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRequest_descriptor_;
}

const ReadRequest& ReadRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

ReadRequest* ReadRequest::default_instance_ = NULL;

ReadRequest* ReadRequest::New() const {
  return new ReadRequest;
}

void ReadRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_queueid()) {
      if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queueid_->clear();
      }
    }
    timeout_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReadRequest)
}

::google::protobuf::uint8* ReadRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadRequest)
  return target;
}

int ReadRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

    // required int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRequest_descriptor_;
  metadata.reflection = ReadRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadResponse::kQueueidFieldNumber;
const int ReadResponse::kQueueentitiyidFieldNumber;
const int ReadResponse::kDataFieldNumber;
#endif  // !_MSC_VER

ReadResponse::ReadResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReadResponse)
}

void ReadResponse::InitAsDefaultInstance() {
}

ReadResponse::ReadResponse(const ReadResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ReadResponse)
}

void ReadResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queueentitiyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadResponse::~ReadResponse() {
  // @@protoc_insertion_point(destructor:ReadResponse)
  SharedDtor();
}

void ReadResponse::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (queueentitiyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueentitiyid_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ReadResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadResponse_descriptor_;
}

const ReadResponse& ReadResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

ReadResponse* ReadResponse::default_instance_ = NULL;

ReadResponse* ReadResponse::New() const {
  return new ReadResponse;
}

void ReadResponse::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_queueid()) {
      if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queueid_->clear();
      }
    }
    if (has_queueentitiyid()) {
      if (queueentitiyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queueentitiyid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReadResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_queueentitiyid;
        break;
      }

      // required string queueentitiyid = 2;
      case 2: {
        if (tag == 18) {
         parse_queueentitiyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueentitiyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueentitiyid().data(), this->queueentitiyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueentitiyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // required bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReadResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReadResponse)
  return false;
#undef DO_
}

void ReadResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReadResponse)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  // required string queueentitiyid = 2;
  if (has_queueentitiyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueentitiyid().data(), this->queueentitiyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueentitiyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->queueentitiyid(), output);
  }

  // required bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReadResponse)
}

::google::protobuf::uint8* ReadResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReadResponse)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  // required string queueentitiyid = 2;
  if (has_queueentitiyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueentitiyid().data(), this->queueentitiyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueentitiyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->queueentitiyid(), target);
  }

  // required bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReadResponse)
  return target;
}

int ReadResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

    // required string queueentitiyid = 2;
    if (has_queueentitiyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueentitiyid());
    }

    // required bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadResponse::MergeFrom(const ReadResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_queueentitiyid()) {
      set_queueentitiyid(from.queueentitiyid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadResponse::CopyFrom(const ReadResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReadResponse::Swap(ReadResponse* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(queueentitiyid_, other->queueentitiyid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadResponse_descriptor_;
  metadata.reflection = ReadResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DequeueRequest::kQueueidFieldNumber;
const int DequeueRequest::kQueueentitiyidFieldNumber;
#endif  // !_MSC_VER

DequeueRequest::DequeueRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DequeueRequest)
}

void DequeueRequest::InitAsDefaultInstance() {
}

DequeueRequest::DequeueRequest(const DequeueRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DequeueRequest)
}

void DequeueRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  queueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  queueentitiyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DequeueRequest::~DequeueRequest() {
  // @@protoc_insertion_point(destructor:DequeueRequest)
  SharedDtor();
}

void DequeueRequest::SharedDtor() {
  if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueid_;
  }
  if (queueentitiyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete queueentitiyid_;
  }
  if (this != default_instance_) {
  }
}

void DequeueRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DequeueRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DequeueRequest_descriptor_;
}

const DequeueRequest& DequeueRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

DequeueRequest* DequeueRequest::default_instance_ = NULL;

DequeueRequest* DequeueRequest::New() const {
  return new DequeueRequest;
}

void DequeueRequest::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_queueid()) {
      if (queueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queueid_->clear();
      }
    }
    if (has_queueentitiyid()) {
      if (queueentitiyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        queueentitiyid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DequeueRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DequeueRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string queueid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueid().data(), this->queueid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_queueentitiyid;
        break;
      }

      // required string queueentitiyid = 2;
      case 2: {
        if (tag == 18) {
         parse_queueentitiyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queueentitiyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->queueentitiyid().data(), this->queueentitiyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "queueentitiyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DequeueRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DequeueRequest)
  return false;
#undef DO_
}

void DequeueRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DequeueRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->queueid(), output);
  }

  // required string queueentitiyid = 2;
  if (has_queueentitiyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueentitiyid().data(), this->queueentitiyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueentitiyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->queueentitiyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DequeueRequest)
}

::google::protobuf::uint8* DequeueRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DequeueRequest)
  // required string queueid = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueid().data(), this->queueid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queueid(), target);
  }

  // required string queueentitiyid = 2;
  if (has_queueentitiyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->queueentitiyid().data(), this->queueentitiyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "queueentitiyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->queueentitiyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DequeueRequest)
  return target;
}

int DequeueRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string queueid = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueid());
    }

    // required string queueentitiyid = 2;
    if (has_queueentitiyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queueentitiyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DequeueRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DequeueRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DequeueRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DequeueRequest::MergeFrom(const DequeueRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_queueentitiyid()) {
      set_queueentitiyid(from.queueentitiyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DequeueRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DequeueRequest::CopyFrom(const DequeueRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DequeueRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DequeueRequest::Swap(DequeueRequest* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(queueentitiyid_, other->queueentitiyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DequeueRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DequeueRequest_descriptor_;
  metadata.reflection = DequeueRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DequeueResponse::kStatusFieldNumber;
#endif  // !_MSC_VER

DequeueResponse::DequeueResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DequeueResponse)
}

void DequeueResponse::InitAsDefaultInstance() {
}

DequeueResponse::DequeueResponse(const DequeueResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DequeueResponse)
}

void DequeueResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DequeueResponse::~DequeueResponse() {
  // @@protoc_insertion_point(destructor:DequeueResponse)
  SharedDtor();
}

void DequeueResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DequeueResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DequeueResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DequeueResponse_descriptor_;
}

const DequeueResponse& DequeueResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

DequeueResponse* DequeueResponse::default_instance_ = NULL;

DequeueResponse* DequeueResponse::New() const {
  return new DequeueResponse;
}

void DequeueResponse::Clear() {
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DequeueResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DequeueResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Status status = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Status_IsValid(value)) {
            set_status(static_cast< ::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DequeueResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DequeueResponse)
  return false;
#undef DO_
}

void DequeueResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DequeueResponse)
  // required .Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DequeueResponse)
}

::google::protobuf::uint8* DequeueResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DequeueResponse)
  // required .Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DequeueResponse)
  return target;
}

int DequeueResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DequeueResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DequeueResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DequeueResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DequeueResponse::MergeFrom(const DequeueResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DequeueResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DequeueResponse::CopyFrom(const DequeueResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DequeueResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DequeueResponse::Swap(DequeueResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DequeueResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DequeueResponse_descriptor_;
  metadata.reflection = DequeueResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Request_ReqType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_ReqType_descriptor_;
}
bool Request_ReqType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Request_ReqType Request::CREATE_QUEUE;
const Request_ReqType Request::GET_QUEUE;
const Request_ReqType Request::DEL_QUEUE;
const Request_ReqType Request::ENQUEUE;
const Request_ReqType Request::READ;
const Request_ReqType Request::DEQUEUE;
const Request_ReqType Request::ReqType_MIN;
const Request_ReqType Request::ReqType_MAX;
const int Request::ReqType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Request::kTypeFieldNumber;
const int Request::kCreateQueueFieldNumber;
const int Request::kGetQueueFieldNumber;
const int Request::kDelQueueFieldNumber;
const int Request::kEnqueueFieldNumber;
const int Request::kReadFieldNumber;
const int Request::kDequeueFieldNumber;
#endif  // !_MSC_VER

Request::Request()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request)
}

void Request::InitAsDefaultInstance() {
  createqueue_ = const_cast< ::CreateQueueRequest*>(&::CreateQueueRequest::default_instance());
  getqueue_ = const_cast< ::GetQueueRequest*>(&::GetQueueRequest::default_instance());
  delqueue_ = const_cast< ::DelQueueRequest*>(&::DelQueueRequest::default_instance());
  enqueue_ = const_cast< ::EnqueueRequest*>(&::EnqueueRequest::default_instance());
  read_ = const_cast< ::ReadRequest*>(&::ReadRequest::default_instance());
  dequeue_ = const_cast< ::DequeueRequest*>(&::DequeueRequest::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  createqueue_ = NULL;
  getqueue_ = NULL;
  delqueue_ = NULL;
  enqueue_ = NULL;
  read_ = NULL;
  dequeue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (this != default_instance_) {
    delete createqueue_;
    delete getqueue_;
    delete delqueue_;
    delete enqueue_;
    delete read_;
    delete dequeue_;
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New() const {
  return new Request;
}

void Request::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    type_ = 1;
    if (has_createqueue()) {
      if (createqueue_ != NULL) createqueue_->::CreateQueueRequest::Clear();
    }
    if (has_getqueue()) {
      if (getqueue_ != NULL) getqueue_->::GetQueueRequest::Clear();
    }
    if (has_delqueue()) {
      if (delqueue_ != NULL) delqueue_->::DelQueueRequest::Clear();
    }
    if (has_enqueue()) {
      if (enqueue_ != NULL) enqueue_->::EnqueueRequest::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::ReadRequest::Clear();
    }
    if (has_dequeue()) {
      if (dequeue_ != NULL) dequeue_->::DequeueRequest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Request.ReqType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Request_ReqType_IsValid(value)) {
            set_type(static_cast< ::Request_ReqType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createQueue;
        break;
      }

      // optional .CreateQueueRequest createQueue = 2;
      case 2: {
        if (tag == 18) {
         parse_createQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getQueue;
        break;
      }

      // optional .GetQueueRequest getQueue = 3;
      case 3: {
        if (tag == 26) {
         parse_getQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delQueue;
        break;
      }

      // optional .DelQueueRequest delQueue = 4;
      case 4: {
        if (tag == 34) {
         parse_delQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_enqueue;
        break;
      }

      // optional .EnqueueRequest enqueue = 5;
      case 5: {
        if (tag == 42) {
         parse_enqueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_read;
        break;
      }

      // optional .ReadRequest read = 6;
      case 6: {
        if (tag == 50) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dequeue;
        break;
      }

      // optional .DequeueRequest dequeue = 7;
      case 7: {
        if (tag == 58) {
         parse_dequeue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dequeue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Request)
  // required .Request.ReqType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .CreateQueueRequest createQueue = 2;
  if (has_createqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->createqueue(), output);
  }

  // optional .GetQueueRequest getQueue = 3;
  if (has_getqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getqueue(), output);
  }

  // optional .DelQueueRequest delQueue = 4;
  if (has_delqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->delqueue(), output);
  }

  // optional .EnqueueRequest enqueue = 5;
  if (has_enqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enqueue(), output);
  }

  // optional .ReadRequest read = 6;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->read(), output);
  }

  // optional .DequeueRequest dequeue = 7;
  if (has_dequeue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dequeue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Request)
}

::google::protobuf::uint8* Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request)
  // required .Request.ReqType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .CreateQueueRequest createQueue = 2;
  if (has_createqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->createqueue(), target);
  }

  // optional .GetQueueRequest getQueue = 3;
  if (has_getqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getqueue(), target);
  }

  // optional .DelQueueRequest delQueue = 4;
  if (has_delqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->delqueue(), target);
  }

  // optional .EnqueueRequest enqueue = 5;
  if (has_enqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enqueue(), target);
  }

  // optional .ReadRequest read = 6;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->read(), target);
  }

  // optional .DequeueRequest dequeue = 7;
  if (has_dequeue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dequeue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request)
  return target;
}

int Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Request.ReqType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .CreateQueueRequest createQueue = 2;
    if (has_createqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createqueue());
    }

    // optional .GetQueueRequest getQueue = 3;
    if (has_getqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getqueue());
    }

    // optional .DelQueueRequest delQueue = 4;
    if (has_delqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delqueue());
    }

    // optional .EnqueueRequest enqueue = 5;
    if (has_enqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enqueue());
    }

    // optional .ReadRequest read = 6;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

    // optional .DequeueRequest dequeue = 7;
    if (has_dequeue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dequeue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_createqueue()) {
      mutable_createqueue()->::CreateQueueRequest::MergeFrom(from.createqueue());
    }
    if (from.has_getqueue()) {
      mutable_getqueue()->::GetQueueRequest::MergeFrom(from.getqueue());
    }
    if (from.has_delqueue()) {
      mutable_delqueue()->::DelQueueRequest::MergeFrom(from.delqueue());
    }
    if (from.has_enqueue()) {
      mutable_enqueue()->::EnqueueRequest::MergeFrom(from.enqueue());
    }
    if (from.has_read()) {
      mutable_read()->::ReadRequest::MergeFrom(from.read());
    }
    if (from.has_dequeue()) {
      mutable_dequeue()->::DequeueRequest::MergeFrom(from.dequeue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_createqueue()) {
    if (!this->createqueue().IsInitialized()) return false;
  }
  if (has_getqueue()) {
    if (!this->getqueue().IsInitialized()) return false;
  }
  if (has_delqueue()) {
    if (!this->delqueue().IsInitialized()) return false;
  }
  if (has_enqueue()) {
    if (!this->enqueue().IsInitialized()) return false;
  }
  if (has_read()) {
    if (!this->read().IsInitialized()) return false;
  }
  if (has_dequeue()) {
    if (!this->dequeue().IsInitialized()) return false;
  }
  return true;
}

void Request::Swap(Request* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(createqueue_, other->createqueue_);
    std::swap(getqueue_, other->getqueue_);
    std::swap(delqueue_, other->delqueue_);
    std::swap(enqueue_, other->enqueue_);
    std::swap(read_, other->read_);
    std::swap(dequeue_, other->dequeue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Response_RespType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_RespType_descriptor_;
}
bool Response_RespType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Response_RespType Response::CREATE_QUEUE;
const Response_RespType Response::GET_QUEUE;
const Response_RespType Response::DEL_QUEUE;
const Response_RespType Response::ENQUEUE;
const Response_RespType Response::READ;
const Response_RespType Response::DEQUEUE;
const Response_RespType Response::RespType_MIN;
const Response_RespType Response::RespType_MAX;
const int Response::RespType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Response::kTypeFieldNumber;
const int Response::kCreateQueueFieldNumber;
const int Response::kGetQueueFieldNumber;
const int Response::kDelQueueFieldNumber;
const int Response::kEnqueueFieldNumber;
const int Response::kReadFieldNumber;
const int Response::kDequeueFieldNumber;
#endif  // !_MSC_VER

Response::Response()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Response)
}

void Response::InitAsDefaultInstance() {
  createqueue_ = const_cast< ::CreateQueueResponse*>(&::CreateQueueResponse::default_instance());
  getqueue_ = const_cast< ::GetQueueResponse*>(&::GetQueueResponse::default_instance());
  delqueue_ = const_cast< ::DelQueueResponse*>(&::DelQueueResponse::default_instance());
  enqueue_ = const_cast< ::EnqueueResponse*>(&::EnqueueResponse::default_instance());
  read_ = const_cast< ::ReadResponse*>(&::ReadResponse::default_instance());
  dequeue_ = const_cast< ::DequeueResponse*>(&::DequeueResponse::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Response)
}

void Response::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  createqueue_ = NULL;
  getqueue_ = NULL;
  delqueue_ = NULL;
  enqueue_ = NULL;
  read_ = NULL;
  dequeue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (this != default_instance_) {
    delete createqueue_;
    delete getqueue_;
    delete delqueue_;
    delete enqueue_;
    delete read_;
    delete dequeue_;
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_QueueService_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New() const {
  return new Response;
}

void Response::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    type_ = 1;
    if (has_createqueue()) {
      if (createqueue_ != NULL) createqueue_->::CreateQueueResponse::Clear();
    }
    if (has_getqueue()) {
      if (getqueue_ != NULL) getqueue_->::GetQueueResponse::Clear();
    }
    if (has_delqueue()) {
      if (delqueue_ != NULL) delqueue_->::DelQueueResponse::Clear();
    }
    if (has_enqueue()) {
      if (enqueue_ != NULL) enqueue_->::EnqueueResponse::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::ReadResponse::Clear();
    }
    if (has_dequeue()) {
      if (dequeue_ != NULL) dequeue_->::DequeueResponse::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Response.RespType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Response_RespType_IsValid(value)) {
            set_type(static_cast< ::Response_RespType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_createQueue;
        break;
      }

      // optional .CreateQueueResponse createQueue = 2;
      case 2: {
        if (tag == 18) {
         parse_createQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_createqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_getQueue;
        break;
      }

      // optional .GetQueueResponse getQueue = 3;
      case 3: {
        if (tag == 26) {
         parse_getQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_delQueue;
        break;
      }

      // optional .DelQueueResponse delQueue = 4;
      case 4: {
        if (tag == 34) {
         parse_delQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_delqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_enqueue;
        break;
      }

      // optional .EnqueueResponse enqueue = 5;
      case 5: {
        if (tag == 42) {
         parse_enqueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enqueue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_read;
        break;
      }

      // optional .ReadResponse read = 6;
      case 6: {
        if (tag == 50) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_dequeue;
        break;
      }

      // optional .DequeueResponse dequeue = 7;
      case 7: {
        if (tag == 58) {
         parse_dequeue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dequeue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Response)
  // required .Response.RespType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .CreateQueueResponse createQueue = 2;
  if (has_createqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->createqueue(), output);
  }

  // optional .GetQueueResponse getQueue = 3;
  if (has_getqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getqueue(), output);
  }

  // optional .DelQueueResponse delQueue = 4;
  if (has_delqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->delqueue(), output);
  }

  // optional .EnqueueResponse enqueue = 5;
  if (has_enqueue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->enqueue(), output);
  }

  // optional .ReadResponse read = 6;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->read(), output);
  }

  // optional .DequeueResponse dequeue = 7;
  if (has_dequeue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->dequeue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Response)
}

::google::protobuf::uint8* Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Response)
  // required .Response.RespType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .CreateQueueResponse createQueue = 2;
  if (has_createqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->createqueue(), target);
  }

  // optional .GetQueueResponse getQueue = 3;
  if (has_getqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getqueue(), target);
  }

  // optional .DelQueueResponse delQueue = 4;
  if (has_delqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->delqueue(), target);
  }

  // optional .EnqueueResponse enqueue = 5;
  if (has_enqueue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->enqueue(), target);
  }

  // optional .ReadResponse read = 6;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->read(), target);
  }

  // optional .DequeueResponse dequeue = 7;
  if (has_dequeue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->dequeue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Response)
  return target;
}

int Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Response.RespType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .CreateQueueResponse createQueue = 2;
    if (has_createqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->createqueue());
    }

    // optional .GetQueueResponse getQueue = 3;
    if (has_getqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getqueue());
    }

    // optional .DelQueueResponse delQueue = 4;
    if (has_delqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->delqueue());
    }

    // optional .EnqueueResponse enqueue = 5;
    if (has_enqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enqueue());
    }

    // optional .ReadResponse read = 6;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

    // optional .DequeueResponse dequeue = 7;
    if (has_dequeue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dequeue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_createqueue()) {
      mutable_createqueue()->::CreateQueueResponse::MergeFrom(from.createqueue());
    }
    if (from.has_getqueue()) {
      mutable_getqueue()->::GetQueueResponse::MergeFrom(from.getqueue());
    }
    if (from.has_delqueue()) {
      mutable_delqueue()->::DelQueueResponse::MergeFrom(from.delqueue());
    }
    if (from.has_enqueue()) {
      mutable_enqueue()->::EnqueueResponse::MergeFrom(from.enqueue());
    }
    if (from.has_read()) {
      mutable_read()->::ReadResponse::MergeFrom(from.read());
    }
    if (from.has_dequeue()) {
      mutable_dequeue()->::DequeueResponse::MergeFrom(from.dequeue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_createqueue()) {
    if (!this->createqueue().IsInitialized()) return false;
  }
  if (has_getqueue()) {
    if (!this->getqueue().IsInitialized()) return false;
  }
  if (has_delqueue()) {
    if (!this->delqueue().IsInitialized()) return false;
  }
  if (has_enqueue()) {
    if (!this->enqueue().IsInitialized()) return false;
  }
  if (has_read()) {
    if (!this->read().IsInitialized()) return false;
  }
  if (has_dequeue()) {
    if (!this->dequeue().IsInitialized()) return false;
  }
  return true;
}

void Response::Swap(Response* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(createqueue_, other->createqueue_);
    std::swap(getqueue_, other->getqueue_);
    std::swap(delqueue_, other->delqueue_);
    std::swap(enqueue_, other->enqueue_);
    std::swap(read_, other->read_);
    std::swap(dequeue_, other->dequeue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
